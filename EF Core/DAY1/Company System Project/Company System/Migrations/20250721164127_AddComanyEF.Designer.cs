// <auto-generated />
using System;
using Company_System.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Company_System.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20250721164127_AddComanyEF")]
    partial class AddComanyEF
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Company_System.DAL.Entities.Departments.Department", b =>
                {
                    b.Property<int>("DepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepId"));

                    b.Property<string>("DepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("Company_System.DAL.Entities.EmployeeProjects.EmployeeProjectAssignment", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ProjectAssignment", (string)null);
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Employees.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<decimal>("FixedSalary")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeType");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("EmpId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees", null, t =>
                        {
                            t.Property("EmployeeType")
                                .HasColumnName("EmployeeType1");
                        });

                    b.HasDiscriminator<int>("EmployeeType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Projects.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Employees.Developers.Developer", b =>
                {
                    b.HasBaseType("Company_System.DAL.Entities.Employees.Employee");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Employees", t =>
                        {
                            t.Property("EmployeeType")
                                .HasColumnName("EmployeeType1");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Employees.Testers.Tester", b =>
                {
                    b.HasBaseType("Company_System.DAL.Entities.Employees.Employee");

                    b.Property<string>("AutomationTool")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestingSpecialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Employees", t =>
                        {
                            t.Property("EmployeeType")
                                .HasColumnName("EmployeeType1");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Company_System.DAL.Entities.EmployeeProjects.EmployeeProjectAssignment", b =>
                {
                    b.HasOne("Company_System.DAL.Entities.Employees.Employee", "Employee")
                        .WithMany("Assignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Company_System.DAL.Entities.Projects.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Employees.Employee", b =>
                {
                    b.HasOne("Company_System.DAL.Entities.Departments.Department", "Dep")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Projects.Project", b =>
                {
                    b.HasOne("Company_System.DAL.Entities.Departments.Department", "Dep")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Departments.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Employees.Employee", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Company_System.DAL.Entities.Projects.Project", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
